name: CI
on:
  push:
  workflow_dispatch:
  workflow_call:
    outputs:
      affectedApps:
        description: "Apps affected by current commit"
        value: ${{ jobs.preinstall.outputs.affectedApps }}
      affectedLibs:
        description: "Libs affected by current commit"
        value: ${{ jobs.preinstall.outputs.affectedLibs }}

jobs:
  cls:
    name: Clean up previous run
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  preinstall:
    name: Preinstall
    runs-on: ubuntu-latest
    outputs:
      affectedApps: ${{ steps.set-nx-output.outputs.affectedApps }}
      affectedLibs: ${{ steps.set-nx-output.outputs.affectedLibs }}
      nxBase: ${{ steps.set-nx-output.outputs.nxBase }}
      nxHead: ${{ steps.set-nx-output.outputs.nxHead }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Set nx output
        id: set-nx-output
        run: |
          echo "::set-output name=nxBase::$NX_BASE"
          echo "::set-output name=nxHead::$NX_HEAD"
          echo "::set-output name=affectedApps::$(echo $(npx nx affected:apps --plain))"
          echo "::set-output name=affectedLibs::$(echo $(npx nx affected:libs --plain))"
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    needs:
      - preinstall
    env:
      NX_BASE: ${{ needs.preinstall.outputs.nxBase }}
      NX_HEAD: ${{ needs.preinstall.outputs.nxHead }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run ESLint
        run: npx nx affected --target=lint --parallel=3
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
      - preinstall
    env:
      NX_BASE: ${{ needs.preinstall.outputs.nxBase }}
      NX_HEAD: ${{ needs.preinstall.outputs.nxHead }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run test
        run: npx nx affected --target=test --parallel=1
  check-types:
    name: Check TypeScript
    runs-on: ubuntu-latest
    needs:
      - preinstall
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - run: npx tsc -v
      - name: Check app
        run: tsc --project ./apps/kickstart/tsconfig.app.json --noEmit
